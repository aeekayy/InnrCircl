{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is a photo application concept",
    "version" : "1.0.0",
    "title" : "InnrCircl",
    "contact" : {
      "email" : "farye@aeekay.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags" : [ {
    "name" : "admins",
    "description" : "Secured Admin-only calls"
  }, {
    "name" : "developers",
    "description" : "Operations available to regular developers"
  }, {
    "name" : "users",
    "description" : "Operations available to regular users"
  } ],
  "paths" : {
    "/user" : {
      "get" : {
        "tags" : [ "admins", "developers", "users" ],
        "summary" : "get the user with the id following the URI. For example /user/$id or /user/$username",
        "operationId" : "getUser",
        "description" : "Returns the user with the user id or the username. This should return the JSON string with all of the required stuff. \n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "userId",
          "description" : "the id of the user (optional)",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "in" : "query",
          "name" : "username",
          "description" : "The username of the user",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the user information for the user",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/user/{userId}" : {
      "delete" : {
        "tags" : [ "admins", "developers" ],
        "summary" : "delete a user by user id",
        "operationId" : "deleteUserById",
        "description" : "Delete a user when given a user id.\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "User id to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "security" : [ {
          "userstore_auth" : [ "write:users", "read:users" ]
        } ]
      },
      "get" : {
        "tags" : [ "admins", "developers", "users" ],
        "summary" : "get the user with the id following the URI. For example /user/$id",
        "operationId" : "getUserById",
        "description" : "Returns the user with the user id or the username. This should return the JSON string with all of the required stuff. \n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "path",
          "name" : "userId",
          "description" : "the id of the user (optional)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the user information for the user",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/albums" : {
      "get" : {
        "tags" : [ "developers", "users", "admins" ],
        "summary" : "return albums owned by user",
        "operationId" : "getAlbums",
        "description" : "Returns all of the albums owned by the user. If a parameter is entered, then return that album if it is valid. \n",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "query",
          "name" : "albumId",
          "description" : "pass the album id of the album that is to be returned (optional)",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "minimum" : 0,
          "maximum" : 50
        } ],
        "responses" : {
          "200" : {
            "description" : "Return all albums for this user",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Album"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "adds an album",
        "operationId" : "addAlbum",
        "description" : "Adds an album to the system",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "201" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "409" : {
            "description" : "an existing item already exists"
          }
        }
      }
    },
    "/quotes" : {
      "get" : {
        "tags" : [ "admins", "developers" ],
        "summary" : "return a list of all quotes in the database",
        "operationId" : "getQuotes",
        "description" : "Get the quotes in the system\n",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Return a random quote from the database",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Quote"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/quotes/random" : {
      "get" : {
        "tags" : [ "developers", "users", "admins" ],
        "summary" : "return a random quote from the database",
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "Return a random quote from the database",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Quote"
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "userstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://userstore.aynrgy.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:users" : "modify users in your account",
        "read:users" : "read your users"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Album" : {
      "type" : "object",
      "required" : [ "id", "name", "creationDate", "albumOwner" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "name" : {
          "type" : "string",
          "example" : "Widget Adapter"
        },
        "creationDate" : {
          "type" : "string",
          "format" : "int32",
          "example" : "2016-08-29T09:12:33.001Z"
        },
        "albumOwner" : {
          "$ref" : "#/definitions/User"
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid",
          "example" : "d290f1ee-6c54-4b01-90e6-d701748f0851"
        },
        "username" : {
          "type" : "string",
          "example" : "darkknight"
        },
        "email" : {
          "type" : "string",
          "example" : "darkknight@gmail.com"
        },
        "phone" : {
          "type" : "string",
          "example" : "408-841-3813"
        },
        "website" : {
          "type" : "string",
          "format" : "url",
          "example" : "http://aeekay.com"
        }
      }
    },
    "Quote" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 324
        },
        "quote" : {
          "type" : "string",
          "example" : "Look into the abyss"
        },
        "created" : {
          "type" : "string",
          "format" : "int32",
          "example" : "2016-08-29T09:12:33.001Z"
        }
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    }
  },
  "schemes" : [ "https" ],
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/Aynrgy/InnrCircl/1.0.0"
}